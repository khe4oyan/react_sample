export const data = [
	{
		lessonName: 'Первые шаги в ReactJS',
		video: 'https://www.youtube.com/watch?v=72KZ_mZ1uQw',
		gribs: [
			['Фреймворк и Библиотека', 'Фреймворк предоставляет архитектуру и контроль над разработкой приложений, в то время как библиотека предлагает функции для решения конкретных задач. # Фреймворк имеет инверсию управления и определяет структуру приложения, в то время как библиотека не обладает таким контролем и требует явного вызова. # Фреймворк предоставляет точки обратного вызова и зависит от вашего приложения, в то время как библиотека не имеет таких точек и является вспомогательным инструментом. # Фреймворк обычно имеет ограниченную гибкость настройки, тогда как библиотека предоставляет большую свободу в использовании только нужных функций. # Фреймворк предлагает более высокий уровень абстракции, скрывая детали реализации, в то время как библиотека предоставляет более низкий уровень абстракции. # Фреймворк часто предоставляет возможности расширения, в то время как библиотека предлагает фиксированный набор функций.'],
			['UI/UX', 'UI (User Interface) - это все то, с чем пользователь взаимодействует на экране, чтобы использовать приложение или веб-сайт. Он включает в себя элементы дизайна, такие как цвета, шрифты, компоненты, макеты и анимации, которые образуют визуальное представление пользовательского интерфейса. # UX (User Experience) - это общий опыт, который пользователь получает при взаимодействии с продуктом или сервисом. Он включает в себя аспекты, такие как удобство использования, доступность, эффективность, удовлетворение пользовательских потребностей и целей. # UI и UX тесно связаны, и оба играют важную роль в создании успешных и привлекательных продуктов.'],
			['Virtual DOM', 'Виртуальный DOM (Virtual DOM) - это концепция, используемая в библиотеках и фреймворках, таких как React, для эффективного обновления пользовательского интерфейса. # Основная идея виртуального DOM заключается в создании представления DOM в памяти, которое является легковесным и эффективным в манипуляции. Вместо прямого изменения реального DOM при каждом изменении данных, виртуальный DOM служит посредником между состоянием приложения и фактическим DOM. # '],
		],
	},

	{
		lessonName: "Components, props and pure functions",
		video: 'https://www.youtube.com/watch?v=BBPawjIWPWE',
		gribs: [
			['Фреймворк и Библиотека', 'Фреймворк предоставляет архитектуру и контроль над разработкой приложений, в то время как библиотека предлагает функции для решения конкретных задач. # Фреймворк имеет инверсию управления и определяет структуру приложения, в то время как библиотека не обладает таким контролем и требует явного вызова. # Фреймворк предоставляет точки обратного вызова и зависит от вашего приложения, в то время как библиотека не имеет таких точек и является вспомогательным инструментом. # Фреймворк обычно имеет ограниченную гибкость настройки, тогда как библиотека предоставляет большую свободу в использовании только нужных функций. # Фреймворк предлагает более высокий уровень абстракции, скрывая детали реализации, в то время как библиотека предоставляет более низкий уровень абстракции. # Фреймворк часто предоставляет возможности расширения, в то время как библиотека предлагает фиксированный набор функций.'],
			['Приложением и Веб-Страница', 'Веб-страницы предназначены для представления информации, тогда как приложения предоставляют интерактивные функции и выполняют более сложные задачи.'],
			['crossorigin в <script>', 'Атрибут "crossorigin" в элементе <script> используется для указания, как браузер должен обрабатывать загружаемый скрипт, если он расположен на другом домене или поддомене. # Когда браузер загружает внешний скрипт с помощью тега <script>, он применяет политику безопасности, известную как "Same-Origin Policy" (политика одного источника). Эта политика ограничивает доступ скрипта к данным на другом домене, чтобы предотвратить возможность атак межсайтового скриптинга (XSS). # Значения для атрибута "crossorigin" могут быть: # "anonymous": Это значение указывает, что скрипт должен быть загружен анонимно и не должен иметь доступа к информации о пользователе на другом домене. Это значение по умолчанию. # "use-credentials": Это значение указывает, что браузер должен включить отправку авторизационных данных (например, куки или заголовки авторизации) вместе с запросом на загрузку скрипта. Это может быть полезно, если вам требуется аутентификация на другом домене.'],
			['Чистая функция (pure_function)', 'Это функция, которая возвращает результат, основываясь только на своих входных аргументах, без каких-либо побочных эффектов или изменений состояния внешних переменных или системы. Она всегда возвращает одинаковый результат при одинаковых входных данных и не вызывает нежелательных побочных эффектов. # Основные характеристики чистых функций: # Предсказуемость: Чистая функция всегда возвращает одинаковый результат при одинаковых входных данных. Это делает их предсказуемыми и легко тестируемыми. # Независимость: Чистая функция не зависит от внешних состояний или переменных. Ее результат полностью определяется аргументами, переданными в функцию. # Отсутствие побочных эффектов: Чистая функция не вносит изменения во внешние переменные, состояния или систему. Она не вызывает мутации, не взаимодействует с базой данных, не отправляет запросы в сеть и т. д.'],
			['Компонент', 'Функция которая в качестве аргумента получает PROPS и возвращает JSX'],
			['JSX', 'JSX - это расширение синтаксиса JavaScript, которое позволяет нам описывать структуру пользовательского интерфейса в React-приложениях. Он представляет собой комбинацию JavaScript и XML-подобного синтаксиса, что делает код более декларативным и удобным для создания компонентов.'],
			['Однонапрвленный поток данных', '(One-Way Data Flow) - это принцип, который используется в React для управления данными и их передачи между компонентами. Согласно этому принципу, данные в React приложении должны двигаться только в одном направлении: сверху вниз (от родительских компонентов к дочерним компонентам). # Один источник истины (Single Source of Truth): Вся состояние приложения хранится в одном месте - обычно в верхнем уровне компонента (например, в состоянии компонента-контейнера или в хранилище состояния, таком как Redux). Это состояние является единственным источником истины для всего приложения. # Прокидывание данных через пропсы: Данные передаются от родительских компонентов к дочерним компонентам через пропсы. Родительский компонент может передавать данные в виде пропсов своим дочерним компонентам, и те, в свою очередь, могут передавать эти данные своим дочерним компонентам. # Неизменяемость данных: Данные в React приложении должны быть неизменяемыми. Это означает, что данные не могут быть изменены напрямую. Вместо этого, при необходимости изменить данные, создается новая копия, которая затем передается дальше по иерархии компонентов. # Обработка событий: Когда происходит событие в дочернем компоненте (например, клик на кнопку), он вызывает обработчик событий, переданный ему из родительского компонента. Родительский компонент может обновить состояние или данные и передать их обратно вниз по иерархии компонентов.'],
		],
	},

	// {
	// 	lessonName: '',
	// 	video: '',
	// 	gribs: [
	// 		['', ''],
	// 	]
	// },
];